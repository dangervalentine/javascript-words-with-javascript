{"version":3,"sources":["Results.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","className","letterCount","results","dictionary","require","alphabet","dict","frequencies","str","freqs","emptyFrequency","forEach","c","emptyFrequencies","match","params","dictWord","dictWordFreqencies","every","i","main","matches","letterFrequencies","properLengthWords","filter","word","length","push","w","Object","keys","key","App","handleChange","event","setState","letters","target","value","state","this","onSubmit","handleSubmit","type","name","maxLength","autoComplete","onChange","placeholder","map","Results","join","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"85v/DAWeA,MATf,SAAgBC,GACd,OACE,yBAAKC,UAAU,UACb,0BAAMA,UAAU,gBAAgBD,EAAME,YAAtC,aACA,2BAAIF,EAAMG,W,OCNVC,EAAaC,EAAQ,IACrBC,EAAW,6BACXC,EAAOH,EAAWA,WAcxB,SAASI,EAAYC,GACnB,IAAMC,EAXR,WACE,IAAMC,EAAiB,GAIvB,OAFA,YAAIL,GAAUM,SAAQ,SAAAC,GAAC,OAAKF,EAAeE,GAAK,KAEzCF,EAMOG,GAId,OAFA,YAAIL,GAAKG,SAAQ,SAAAC,GAAC,OAAKH,EAAMG,IAAM,KAE5BH,EAKT,SAASK,EAAMC,EAAQC,GACrB,IAAMC,EAAqBV,EAAYS,GAEvC,OAAO,YAAIX,GAAUa,OAAM,SAAAC,GAAC,OAAIJ,EAAOI,IAAMF,EAAmBE,MA0BnDC,MAvBf,SAAcL,GAMZ,IALA,IAAMb,EAAU,GACVmB,EAAU,GACVC,EAAoBf,EAAYQ,GAChCQ,EAAoBjB,EAAKkB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUX,EAAOW,UAE3DP,EAAI,EAAGA,EAAII,EAAkBG,OAAQP,IACxCL,EAAMQ,EAAmBC,EAAkBJ,KAC7CE,EAAQM,KAAKJ,EAAkBJ,IAInC,IAZoB,eAYXA,GACPjB,EAAQiB,GAAKE,EAAQG,QAAO,SAAAI,GAAC,OAAIA,EAAEF,SAAWP,MADvCA,EAAI,EAAGA,EAAIJ,EAAOW,OAAS,EAAGP,IAAM,EAApCA,GAQT,OAJAU,OAAOC,KAAK5B,GAASS,SACnB,SAAAoB,GAAG,OAA4B,IAAxB7B,EAAQ6B,GAAKL,eAAuBxB,EAAQ6B,MAG9C7B,GCCM8B,G,kBA9Cb,WAAYjC,GAAQ,IAAD,8BACjB,4CAAMA,KAORkC,aAAe,SAAAC,GAAK,OAClB,EAAKC,SAAS,CACZC,QAASF,EAAMG,OAAOC,MACtBpC,QAASkB,EAAKc,EAAMG,OAAOC,UAT7B,EAAKC,MAAQ,CACXH,QAAS,GACTlC,QAAS,IAJM,E,sEAejB,IAAMA,EAAUsC,KAAKD,MAAMrC,QAE3B,OACE,6BACE,uBAAGF,UAAU,SAAb,yBACA,qDACA,0BAAMyC,SAAUD,KAAKE,cACnB,+BACE,2BACEC,KAAK,OACLC,KAAK,OACLC,UAAW,GACXC,aAAc,MACdR,MAAOE,KAAKD,MAAMH,QAClBW,SAAUP,KAAKP,aACfe,YAAY,6BAIjBnB,OAAOC,KAAK5B,GAAS+C,KAAI,SAAAlB,GAAG,OAC3B,kBAACmB,EAAD,CACEnB,IAAG,UAAKA,EAAL,KACH9B,YAAa8B,EACb7B,QAASA,EAAQ6B,GAAKoB,KAAK,gB,GAvCrBC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3C,MACvB,2DCZN4C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1e3c35ce.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Result(props) {\r\n  return (\r\n    <div className=\"result\">\r\n      <span className=\"letter-count\">{props.letterCount} Letters:</span>\r\n      <p>{props.results}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","const dictionary = require(\"./dictionary.json\");\r\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\nconst dict = dictionary.dictionary;\r\n\r\n// Create an object that has a property\r\n// for each letter, with a value of 0.\r\nfunction emptyFrequencies() {\r\n  const emptyFrequency = {};\r\n\r\n  [...alphabet].forEach(c => (emptyFrequency[c] = 0));\r\n\r\n  return emptyFrequency;\r\n}\r\n\r\n// Iterate through a word and increment\r\n// a value for each encounter of a letter.\r\nfunction frequencies(str) {\r\n  const freqs = emptyFrequencies();\r\n\r\n  [...str].forEach(c => (freqs[c] += 1));\r\n\r\n  return freqs;\r\n}\r\n\r\n// Determine if a given word has letters outside\r\n// the ones entered in the search params\r\nfunction match(params, dictWord) {\r\n  const dictWordFreqencies = frequencies(dictWord);\r\n\r\n  return [...alphabet].every(i => params[i] >= dictWordFreqencies[i]);\r\n}\r\n\r\nfunction main(params) {\r\n  const results = {};\r\n  const matches = [];\r\n  const letterFrequencies = frequencies(params);\r\n  const properLengthWords = dict.filter(word => word.length <= params.length);\r\n\r\n  for (let i = 0; i < properLengthWords.length; i++) {\r\n    if (match(letterFrequencies, properLengthWords[i])) {\r\n      matches.push(properLengthWords[i]);\r\n    }\r\n  }\r\n\r\n  for (let i = 1; i < params.length + 1; i++) {\r\n    results[i] = matches.filter(w => w.length === i);\r\n  }\r\n\r\n  Object.keys(results).forEach(\r\n    key => results[key].length === 0 && delete results[key]\r\n  );\r\n\r\n  return results;\r\n}\r\n\r\nexport default main;\r\n","import React from \"react\";\nimport Results from \"./Results\";\nimport main from \"./helper\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      letters: \"\",\n      results: {}\n    };\n  }\n\n  handleChange = event =>\n    this.setState({\n      letters: event.target.value,\n      results: main(event.target.value)\n    });\n\n  render() {\n    const results = this.state.results;\n\n    return (\n      <div>\n        <p className=\"title\">Words With Javascript</p>\n        <code>by victor d johnson</code>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              maxLength={11}\n              autoComplete={\"off\"}\n              value={this.state.letters}\n              onChange={this.handleChange}\n              placeholder=\"enter up to 11 letters\"\n            />\n          </label>\n        </form>\n        {Object.keys(results).map(key => (\n          <Results\n            key={`${key}a`}\n            letterCount={key}\n            results={results[key].join(\", \")}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}