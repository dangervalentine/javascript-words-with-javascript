{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dict","require","dictionary","alphabet","frequencies","str","freqs","emptyFrequency","i","length","emptyFrequencies","match","word","dictWord","dictWordFreqencies","main","params","obj","matches","letterFrequencies","properLengthWords","filter","push","w","App","props","state","letters","results","handleChange","bind","handleSubmit","event","this","setState","target","value","preventDefault","className","onSubmit","type","name","onChange","placeholder","autoComplete","maxLength","Object","keys","map","key","join","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q4w/DAIMA,G,MAFaC,EAAQ,IAEHC,YAClBC,EAAW,6BAYjB,SAASC,EAAYC,GAGnB,IAFA,IAAMC,EAXR,WAGE,IAFA,IAAMC,EAAiB,GAEdC,EAAI,EAAGA,EAAIL,EAASM,OAAQD,IACnCD,EAAeJ,EAASK,IAAM,EAGhC,OAAOD,EAIOG,GAELF,EAAI,EAAGA,EAAIH,EAAII,OAAQD,IAC9BF,EAAMD,EAAIG,KAAO,EAGnB,OAAOF,EAGT,SAASK,EAAMC,EAAMC,GAGnB,IAFA,IAAMC,EAAqBV,EAAYS,GAE9BL,EAAI,EAAGA,EAAIL,EAASM,OAAQD,IACnC,GAAIM,EAAmBX,EAASK,IAAMI,EAAKT,EAASK,IAClD,OAAO,EAIX,OAAO,EAGT,SAASO,EAAKC,GAMZ,IALA,IAAMC,EAAM,GACNC,EAAU,GACVC,EAAoBf,EAAYY,GAChCI,EAAoBpB,EAAKqB,QAAO,SAAAT,GAAI,OAAIA,EAAKH,QAAUO,EAAOP,UAE3DD,EAAI,EAAGA,EAAIY,EAAkBX,OAAQD,IACxCG,EAAMQ,EAAmBC,EAAkBZ,KAC7CU,EAAQI,KAAKF,EAAkBZ,IAInC,IAZoB,eAYXA,GACPS,EAAI,GAAD,OAAIT,IAAOU,EAAQG,QAAO,SAAAE,GAAC,OAAIA,EAAEd,SAAWD,MADxCA,EAAI,EAAGA,EAAIQ,EAAOP,OAAS,EAAGD,IAAM,EAApCA,GAIT,OAAOS,E,IA0DMO,E,YAtDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,QAAS,GAAIC,QAAS,IAErC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,0EAQNE,GACXC,KAAKC,SAAS,CACZP,QAASK,EAAMG,OAAOC,MACtBR,QAASb,EAAKiB,EAAMG,OAAOC,W,mCAIlBJ,GACXA,EAAMK,iBACNJ,KAAKC,SAAS,CACZN,QAASb,EAAKkB,KAAKP,MAAMC,a,+BAInB,IAAD,OACP,OACE,yBAAKW,UAAU,OACb,0BAAMC,SAAUN,KAAKF,cACnB,+BACE,2BACES,KAAK,OACLC,KAAK,OACLC,SAAUT,KAAKJ,aACfO,MAAOH,KAAKP,MAAMC,QAClBgB,YAAY,UACZC,aAAc,MACdC,UAAW,OAIjB,gFACCC,OAAOC,KAAKd,KAAKP,MAAME,SAASoB,KAAI,SAAAC,GACnC,IAAMrB,EAAU,EAAKF,MAAME,QAAQqB,GAAKC,KAAK,MAC7C,OAAuC,IAAnC,EAAKxB,MAAME,QAAQqB,GAAKxC,OAExB,uBAAGwC,IAAG,UAAKA,EAAL,MACHA,EADH,KACUrB,GAGA,uC,GAhDNuB,IAAMC,WC9CJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7C,MACvB,2DCZN8C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d6c472f7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nconst dictionary = require(\"./dictionary.json\");\n\nconst dict = dictionary.dictionary;\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\nfunction emptyFrequencies() {\n  const emptyFrequency = {};\n\n  for (let i = 0; i < alphabet.length; i++) {\n    emptyFrequency[alphabet[i]] = 0;\n  }\n\n  return emptyFrequency;\n}\n\nfunction frequencies(str) {\n  const freqs = emptyFrequencies();\n\n  for (let i = 0; i < str.length; i++) {\n    freqs[str[i]] += 1;\n  }\n\n  return freqs;\n}\n\nfunction match(word, dictWord) {\n  const dictWordFreqencies = frequencies(dictWord);\n\n  for (let i = 0; i < alphabet.length; i++) {\n    if (dictWordFreqencies[alphabet[i]] > word[alphabet[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction main(params) {\n  const obj = {};\n  const matches = [];\n  const letterFrequencies = frequencies(params);\n  const properLengthWords = dict.filter(word => word.length <= params.length);\n\n  for (let i = 0; i < properLengthWords.length; i++) {\n    if (match(letterFrequencies, properLengthWords[i])) {\n      matches.push(properLengthWords[i]);\n    }\n  }\n\n  for (let i = 1; i < params.length + 1; i++) {\n    obj[`${i}`] = matches.filter(w => w.length === i);\n  }\n\n  return obj;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { letters: \"\", results: {} };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      letters: event.target.value,\n      results: main(event.target.value)\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({\n      results: main(this.state.letters)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              onChange={this.handleChange}\n              value={this.state.letters}\n              placeholder=\"Letters\"\n              autoComplete={\"off\"}\n              maxLength={11}\n            />\n          </label>\n        </form>\n        <div>enter up to 11 letters and see what we can find</div>\n        {Object.keys(this.state.results).map(key => {\n          const results = this.state.results[key].join(\", \");\n          if (this.state.results[key].length !== 0) {\n            return (\n              <p key={`${key}a`}>\n                {key}: {results}\n              </p>\n            );\n          } else return <span />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}